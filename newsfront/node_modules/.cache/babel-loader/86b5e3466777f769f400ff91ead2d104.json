{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\loren\\\\OneDrive\\\\\\u684C\\u9762\\\\hw8\\\\newsfront\\\\src\\\\components\\\\Navbars\\\\SearchSelect.jsx\";\nimport React, { Component } from \"react\";\nimport AsyncSelect from \"react-select/async\"; // import { colourOptions } from \"./docs/data\";\n// const filterColors = (inputValue: string) => {\n//   return colourOptions.filter((i) =>\n//     i.label.toLowerCase().includes(inputValue.toLowerCase())\n//   );\n// };\n\nfunction bingAutosuggest(query, key) {\n  var endpoint = \"https://api.cognitive.microsoft.com/bing/v7.0/Suggestions\";\n  var request = new XMLHttpRequest();\n\n  try {\n    request.open(\"GET\", endpoint + \"?q=\" + encodeURIComponent(query));\n  } catch (e) {\n    renderErrorMessage(\"Bad request\");\n    return false;\n  }\n\n  request.setRequestHeader(\"Ocp-Apim-Subscription-Key\", key);\n  request.addEventListener(\"load\", function () {\n    if (this.status === 200) {\n      renderSearchResults(JSON.parse(this.responseText));\n    }\n  });\n  request.addEventListener(\"error\", function () {\n    renderErrorMessage(\"Network error\");\n  });\n  request.addEventListener(\"abort\", function () {\n    renderErrorMessage(\"Request aborted\");\n  });\n  request.send();\n  return false;\n}\n\nconst promiseOptions = inputValue => new Promise(resolve => {\n  setTimeout(() => {\n    resolve(bingAutosuggest(inputValue, \"fd0ef54849aa44c890942a2eb8866194\"));\n  }, 1000);\n});\n\nexport default class WithPromises extends Component {\n  render() {\n    return /*#__PURE__*/React.createElement(AsyncSelect, {\n      cacheOptions: true,\n      defaultOptions: true,\n      loadOptions: promiseOptions,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 7\n      }\n    });\n  }\n\n}","map":{"version":3,"sources":["C:/Users/loren/OneDrive/桌面/hw8/newsfront/src/components/Navbars/SearchSelect.jsx"],"names":["React","Component","AsyncSelect","bingAutosuggest","query","key","endpoint","request","XMLHttpRequest","open","encodeURIComponent","e","renderErrorMessage","setRequestHeader","addEventListener","status","renderSearchResults","JSON","parse","responseText","send","promiseOptions","inputValue","Promise","resolve","setTimeout","WithPromises","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAEA,OAAOC,WAAP,MAAwB,oBAAxB,C,CACA;AAEA;AACA;AACA;AACA;AACA;;AACA,SAASC,eAAT,CAAyBC,KAAzB,EAAgCC,GAAhC,EAAqC;AACnC,MAAIC,QAAQ,GAAG,2DAAf;AAEA,MAAIC,OAAO,GAAG,IAAIC,cAAJ,EAAd;;AAEA,MAAI;AACFD,IAAAA,OAAO,CAACE,IAAR,CAAa,KAAb,EAAoBH,QAAQ,GAAG,KAAX,GAAmBI,kBAAkB,CAACN,KAAD,CAAzD;AACD,GAFD,CAEE,OAAOO,CAAP,EAAU;AACVC,IAAAA,kBAAkB,CAAC,aAAD,CAAlB;AACA,WAAO,KAAP;AACD;;AACDL,EAAAA,OAAO,CAACM,gBAAR,CAAyB,2BAAzB,EAAsDR,GAAtD;AACAE,EAAAA,OAAO,CAACO,gBAAR,CAAyB,MAAzB,EAAiC,YAAY;AAC3C,QAAI,KAAKC,MAAL,KAAgB,GAApB,EAAyB;AACvBC,MAAAA,mBAAmB,CAACC,IAAI,CAACC,KAAL,CAAW,KAAKC,YAAhB,CAAD,CAAnB;AACD;AACF,GAJD;AAKAZ,EAAAA,OAAO,CAACO,gBAAR,CAAyB,OAAzB,EAAkC,YAAY;AAC5CF,IAAAA,kBAAkB,CAAC,eAAD,CAAlB;AACD,GAFD;AAIAL,EAAAA,OAAO,CAACO,gBAAR,CAAyB,OAAzB,EAAkC,YAAY;AAC5CF,IAAAA,kBAAkB,CAAC,iBAAD,CAAlB;AACD,GAFD;AAGAL,EAAAA,OAAO,CAACa,IAAR;AACA,SAAO,KAAP;AACD;;AACD,MAAMC,cAAc,GAAIC,UAAD,IACrB,IAAIC,OAAJ,CAAaC,OAAD,IAAa;AACvBC,EAAAA,UAAU,CAAC,MAAM;AACfD,IAAAA,OAAO,CAACrB,eAAe,CAACmB,UAAD,EAAa,kCAAb,CAAhB,CAAP;AACD,GAFS,EAEP,IAFO,CAAV;AAGD,CAJD,CADF;;AAOA,eAAe,MAAMI,YAAN,SAA2BzB,SAA3B,CAAqC;AAClD0B,EAAAA,MAAM,GAAG;AACP,wBACE,oBAAC,WAAD;AAAa,MAAA,YAAY,MAAzB;AAA0B,MAAA,cAAc,MAAxC;AAAyC,MAAA,WAAW,EAAEN,cAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAGD;;AALiD","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nimport AsyncSelect from \"react-select/async\";\r\n// import { colourOptions } from \"./docs/data\";\r\n\r\n// const filterColors = (inputValue: string) => {\r\n//   return colourOptions.filter((i) =>\r\n//     i.label.toLowerCase().includes(inputValue.toLowerCase())\r\n//   );\r\n// };\r\nfunction bingAutosuggest(query, key) {\r\n  var endpoint = \"https://api.cognitive.microsoft.com/bing/v7.0/Suggestions\";\r\n\r\n  var request = new XMLHttpRequest();\r\n\r\n  try {\r\n    request.open(\"GET\", endpoint + \"?q=\" + encodeURIComponent(query));\r\n  } catch (e) {\r\n    renderErrorMessage(\"Bad request\");\r\n    return false;\r\n  }\r\n  request.setRequestHeader(\"Ocp-Apim-Subscription-Key\", key);\r\n  request.addEventListener(\"load\", function () {\r\n    if (this.status === 200) {\r\n      renderSearchResults(JSON.parse(this.responseText));\r\n    }\r\n  });\r\n  request.addEventListener(\"error\", function () {\r\n    renderErrorMessage(\"Network error\");\r\n  });\r\n\r\n  request.addEventListener(\"abort\", function () {\r\n    renderErrorMessage(\"Request aborted\");\r\n  });\r\n  request.send();\r\n  return false;\r\n}\r\nconst promiseOptions = (inputValue) =>\r\n  new Promise((resolve) => {\r\n    setTimeout(() => {\r\n      resolve(bingAutosuggest(inputValue, \"fd0ef54849aa44c890942a2eb8866194\"));\r\n    }, 1000);\r\n  });\r\n\r\nexport default class WithPromises extends Component {\r\n  render() {\r\n    return (\r\n      <AsyncSelect cacheOptions defaultOptions loadOptions={promiseOptions} />\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}