{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\loren\\\\OneDrive\\\\\\u684C\\u9762\\\\hw8\\\\newsfront\\\\src\\\\components\\\\Navbars\\\\SearchSelect.jsx\";\nimport React, { Component } from \"react\";\nimport AsyncSelect from \"react-select/async\";\n\nfunction bingAutosuggest(query, key) {} //   var endpoint = \"https://api.cognitive.microsoft.com/bing/v7.0/Suggestions\";\n//   var request = new XMLHttpRequest();\n//   try {\n//     request.open(\"GET\", endpoint + \"?q=\" + encodeURIComponent(query));\n//   } catch (e) {\n//     console.log(\"error\");\n//     return false;\n//   }\n//   request.setRequestHeader(\"Ocp-Apim-Subscription-Key\", key);\n//   request.addEventListener(\"load\", function () {\n//     if (this.status === 200) {\n//       const data = JSON.parse(this.responseText);\n//       const resultsRaw = data.suggestionGroups[0].searchSuggestions;\n//       const results = resultsRaw.map((result) => ({\n//         value: result.displayText,\n//         label: result.displayText,\n//       }));\n//       console.log(results);\n//       return results;\n//     }\n//   });\n//   request.addEventListener(\"error\", function () {\n//     console.log(\"error\");\n//   });\n//   request.addEventListener(\"abort\", function () {\n//     console.log(\"error\");\n//   });\n//   request.send();\n//   return false;\n//   return results;\n// async function promiseOptions(inputValue) {\n//       const response\n//   }\n\n\nexport default class WithPromises extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.promiseOptions = inputValue => {\n      // if (!inputValue) {\n      //   return Promise.resolve({ results: [] });\n      // }\n      return fetch(`https://api.cognitive.microsoft.com/bing/v7.0/Suggestions?q=${encodeURIComponent(inputValue)}`).then(response => {\n        console.log(inputValue);\n        return response.json();\n      }).then(json => {\n        const formatted = json.suggestionGroups[0].searchSuggestions.map(l => ({\n          value: l.displayText,\n          label: l.displayText\n        }));\n        console.log(\" formatted \" + formatted);\n        return {\n          formatted\n        };\n      });\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(AsyncSelect, {\n      loadOptions: this.promiseOptions,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 12\n      }\n    });\n  }\n\n}","map":{"version":3,"sources":["C:/Users/loren/OneDrive/桌面/hw8/newsfront/src/components/Navbars/SearchSelect.jsx"],"names":["React","Component","AsyncSelect","bingAutosuggest","query","key","WithPromises","promiseOptions","inputValue","fetch","encodeURIComponent","then","response","console","log","json","formatted","suggestionGroups","searchSuggestions","map","l","value","displayText","label","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAEA,OAAOC,WAAP,MAAwB,oBAAxB;;AAEA,SAASC,eAAT,CAAyBC,KAAzB,EAAgCC,GAAhC,EAAqC,CA+BpC,CA/BD,CACE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGF;AACA;AACA;;;AAEA,eAAe,MAAMC,YAAN,SAA2BL,SAA3B,CAAqC;AAAA;AAAA;;AAAA,SAOlDM,cAPkD,GAOhCC,UAAD,IAAgB;AAC/B;AACA;AACA;AACA,aAAOC,KAAK,CACT,+DAA8DC,kBAAkB,CAC/EF,UAD+E,CAE/E,EAHQ,CAAL,CAKJG,IALI,CAKEC,QAAD,IAAc;AAClBC,QAAAA,OAAO,CAACC,GAAR,CAAYN,UAAZ;AACA,eAAOI,QAAQ,CAACG,IAAT,EAAP;AACD,OARI,EASJJ,IATI,CASEI,IAAD,IAAU;AACd,cAAMC,SAAS,GAAGD,IAAI,CAACE,gBAAL,CAAsB,CAAtB,EAAyBC,iBAAzB,CAA2CC,GAA3C,CACfC,CAAD,KAAQ;AAAEC,UAAAA,KAAK,EAAED,CAAC,CAACE,WAAX;AAAwBC,UAAAA,KAAK,EAAEH,CAAC,CAACE;AAAjC,SAAR,CADgB,CAAlB;AAGAT,QAAAA,OAAO,CAACC,GAAR,CAAY,gBAAgBE,SAA5B;AACA,eAAO;AAAEA,UAAAA;AAAF,SAAP;AACD,OAfI,CAAP;AAgBD,KA3BiD;AAAA;;AA6BlDQ,EAAAA,MAAM,GAAG;AACP,wBAAO,oBAAC,WAAD;AAAa,MAAA,WAAW,EAAE,KAAKjB,cAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD;;AA/BiD","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nimport AsyncSelect from \"react-select/async\";\r\n\r\nfunction bingAutosuggest(query, key) {\r\n  //   var endpoint = \"https://api.cognitive.microsoft.com/bing/v7.0/Suggestions\";\r\n  //   var request = new XMLHttpRequest();\r\n  //   try {\r\n  //     request.open(\"GET\", endpoint + \"?q=\" + encodeURIComponent(query));\r\n  //   } catch (e) {\r\n  //     console.log(\"error\");\r\n  //     return false;\r\n  //   }\r\n  //   request.setRequestHeader(\"Ocp-Apim-Subscription-Key\", key);\r\n  //   request.addEventListener(\"load\", function () {\r\n  //     if (this.status === 200) {\r\n  //       const data = JSON.parse(this.responseText);\r\n  //       const resultsRaw = data.suggestionGroups[0].searchSuggestions;\r\n  //       const results = resultsRaw.map((result) => ({\r\n  //         value: result.displayText,\r\n  //         label: result.displayText,\r\n  //       }));\r\n  //       console.log(results);\r\n  //       return results;\r\n  //     }\r\n  //   });\r\n  //   request.addEventListener(\"error\", function () {\r\n  //     console.log(\"error\");\r\n  //   });\r\n  //   request.addEventListener(\"abort\", function () {\r\n  //     console.log(\"error\");\r\n  //   });\r\n  //   request.send();\r\n  //   return false;\r\n  //   return results;\r\n}\r\n\r\n// async function promiseOptions(inputValue) {\r\n//       const response\r\n//   }\r\n\r\nexport default class WithPromises extends Component {\r\n  //   componentDidMount() {\r\n  //   promiseOptions = (inputValue) => {\r\n  //     var res = bingAutosuggest(inputValue, \"fd0ef54849aa44c890942a2eb8866194\");\r\n  //     console.log(res);\r\n  //   };\r\n\r\n  promiseOptions = (inputValue) => {\r\n    // if (!inputValue) {\r\n    //   return Promise.resolve({ results: [] });\r\n    // }\r\n    return fetch(\r\n      `https://api.cognitive.microsoft.com/bing/v7.0/Suggestions?q=${encodeURIComponent(\r\n        inputValue\r\n      )}`\r\n    )\r\n      .then((response) => {\r\n        console.log(inputValue);\r\n        return response.json();\r\n      })\r\n      .then((json) => {\r\n        const formatted = json.suggestionGroups[0].searchSuggestions.map(\r\n          (l) => ({ value: l.displayText, label: l.displayText })\r\n        );\r\n        console.log(\" formatted \" + formatted);\r\n        return { formatted };\r\n      });\r\n  };\r\n\r\n  render() {\r\n    return <AsyncSelect loadOptions={this.promiseOptions} />;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}