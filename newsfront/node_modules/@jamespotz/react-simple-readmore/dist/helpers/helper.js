"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.preset = exports.animate = void 0;

var animate = function animate(_ref, fn) {
  var frameRate = _ref.frameRate,
      x = _ref.x,
      v = _ref.v,
      destX = _ref.destX,
      k = _ref.k,
      b = _ref.b,
      precision = _ref.precision,
      mass = _ref.mass,
      key = _ref.key,
      el = _ref.el;
  // x start position
  // v velocity
  var newX = x,
      newV = v;

  var animationLoop = function animationLoop() {
    // Spring stiffness, in kg / s^2
    // for animations, destX is really spring length (spring at rest). initial
    // position is considered as the stretched/compressed position of a spring
    var Fspring = -k * (newX - destX); // Damping, in kg / s

    var Fdamper = -b * newV; // Accelaration ((-k * (x-X)) + (-b * v))

    var a = (Fspring + Fdamper) / mass; // framRate of 1000/60 thats 60fps

    newV += a * (frameRate / 1000);
    newX += newV * (frameRate / 1000); // precision is when the animation should stop default is 0.01.

    if (Math.abs(newV) < precision && Math.abs(newX - destX) < precision) {
      newX = destX;
      newV = 0;
      el.style[key] = "".concat(newX, "px");
      return typeof fn === 'function' ? fn.call() : false;
    }

    if (el) el.style[key] = "".concat(newX, "px");
    requestAnimationFrame(animationLoop);
  };

  requestAnimationFrame(animationLoop);
};

exports.animate = animate;
var preset = {
  noWobble: {
    stiffness: 170,
    damping: 26
  },
  gentle: {
    stiffness: 120,
    damping: 14
  },
  wobbly: {
    stiffness: 180,
    damping: 12
  },
  stiff: {
    stiffness: 210,
    damping: 20
  },
  slow: {
    stiffness: 280,
    damping: 60
  },
  molasses: {
    stiffness: 280,
    damping: 120
  }
};
exports.preset = preset;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9SZWFkTW9yZS9oZWxwZXJzL2hlbHBlci5qcyJdLCJuYW1lcyI6WyJhbmltYXRlIiwiZm4iLCJmcmFtZVJhdGUiLCJ4IiwidiIsImRlc3RYIiwiayIsImIiLCJwcmVjaXNpb24iLCJtYXNzIiwia2V5IiwiZWwiLCJuZXdYIiwibmV3ViIsImFuaW1hdGlvbkxvb3AiLCJGc3ByaW5nIiwiRmRhbXBlciIsImEiLCJNYXRoIiwiYWJzIiwic3R5bGUiLCJjYWxsIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwicHJlc2V0Iiwibm9Xb2JibGUiLCJzdGlmZm5lc3MiLCJkYW1waW5nIiwiZ2VudGxlIiwid29iYmx5Iiwic3RpZmYiLCJzbG93IiwibW9sYXNzZXMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBTyxJQUFNQSxPQUFPLEdBQUcsU0FBVkEsT0FBVSxPQUV0QkMsRUFGc0IsRUFHbEI7QUFBQSxNQUZGQyxTQUVFLFFBRkZBLFNBRUU7QUFBQSxNQUZTQyxDQUVULFFBRlNBLENBRVQ7QUFBQSxNQUZZQyxDQUVaLFFBRllBLENBRVo7QUFBQSxNQUZlQyxLQUVmLFFBRmVBLEtBRWY7QUFBQSxNQUZzQkMsQ0FFdEIsUUFGc0JBLENBRXRCO0FBQUEsTUFGeUJDLENBRXpCLFFBRnlCQSxDQUV6QjtBQUFBLE1BRjRCQyxTQUU1QixRQUY0QkEsU0FFNUI7QUFBQSxNQUZ1Q0MsSUFFdkMsUUFGdUNBLElBRXZDO0FBQUEsTUFGNkNDLEdBRTdDLFFBRjZDQSxHQUU3QztBQUFBLE1BRmtEQyxFQUVsRCxRQUZrREEsRUFFbEQ7QUFDSjtBQUNBO0FBQ0EsTUFBSUMsSUFBSSxHQUFHVCxDQUFYO0FBQUEsTUFDQ1UsSUFBSSxHQUFHVCxDQURSOztBQUdBLE1BQU1VLGFBQWEsR0FBRyxTQUFoQkEsYUFBZ0IsR0FBTTtBQUMzQjtBQUVBO0FBQ0E7QUFDQSxRQUFJQyxPQUFPLEdBQUcsQ0FBQ1QsQ0FBRCxJQUFNTSxJQUFJLEdBQUdQLEtBQWIsQ0FBZCxDQUwyQixDQU8zQjs7QUFDQSxRQUFJVyxPQUFPLEdBQUcsQ0FBQ1QsQ0FBRCxHQUFLTSxJQUFuQixDQVIyQixDQVUzQjs7QUFDQSxRQUFJSSxDQUFDLEdBQUcsQ0FBQ0YsT0FBTyxHQUFHQyxPQUFYLElBQXNCUCxJQUE5QixDQVgyQixDQWEzQjs7QUFDQUksSUFBQUEsSUFBSSxJQUFJSSxDQUFDLElBQUlmLFNBQVMsR0FBRyxJQUFoQixDQUFUO0FBRUFVLElBQUFBLElBQUksSUFBSUMsSUFBSSxJQUFJWCxTQUFTLEdBQUcsSUFBaEIsQ0FBWixDQWhCMkIsQ0FrQjNCOztBQUNBLFFBQUlnQixJQUFJLENBQUNDLEdBQUwsQ0FBU04sSUFBVCxJQUFpQkwsU0FBakIsSUFBOEJVLElBQUksQ0FBQ0MsR0FBTCxDQUFTUCxJQUFJLEdBQUdQLEtBQWhCLElBQXlCRyxTQUEzRCxFQUFzRTtBQUNyRUksTUFBQUEsSUFBSSxHQUFHUCxLQUFQO0FBQ0FRLE1BQUFBLElBQUksR0FBRyxDQUFQO0FBQ0FGLE1BQUFBLEVBQUUsQ0FBQ1MsS0FBSCxDQUFTVixHQUFULGNBQW1CRSxJQUFuQjtBQUNBLGFBQU8sT0FBT1gsRUFBUCxLQUFjLFVBQWQsR0FBMkJBLEVBQUUsQ0FBQ29CLElBQUgsRUFBM0IsR0FBdUMsS0FBOUM7QUFDQTs7QUFDRCxRQUFJVixFQUFKLEVBQVFBLEVBQUUsQ0FBQ1MsS0FBSCxDQUFTVixHQUFULGNBQW1CRSxJQUFuQjtBQUNSVSxJQUFBQSxxQkFBcUIsQ0FBQ1IsYUFBRCxDQUFyQjtBQUNBLEdBM0JEOztBQTZCQVEsRUFBQUEscUJBQXFCLENBQUNSLGFBQUQsQ0FBckI7QUFDQSxDQXZDTTs7O0FBeUNBLElBQU1TLE1BQU0sR0FBRztBQUNyQkMsRUFBQUEsUUFBUSxFQUFFO0FBQUVDLElBQUFBLFNBQVMsRUFBRSxHQUFiO0FBQWtCQyxJQUFBQSxPQUFPLEVBQUU7QUFBM0IsR0FEVztBQUVyQkMsRUFBQUEsTUFBTSxFQUFFO0FBQUVGLElBQUFBLFNBQVMsRUFBRSxHQUFiO0FBQWtCQyxJQUFBQSxPQUFPLEVBQUU7QUFBM0IsR0FGYTtBQUdyQkUsRUFBQUEsTUFBTSxFQUFFO0FBQUVILElBQUFBLFNBQVMsRUFBRSxHQUFiO0FBQWtCQyxJQUFBQSxPQUFPLEVBQUU7QUFBM0IsR0FIYTtBQUlyQkcsRUFBQUEsS0FBSyxFQUFFO0FBQUVKLElBQUFBLFNBQVMsRUFBRSxHQUFiO0FBQWtCQyxJQUFBQSxPQUFPLEVBQUU7QUFBM0IsR0FKYztBQUtyQkksRUFBQUEsSUFBSSxFQUFFO0FBQUVMLElBQUFBLFNBQVMsRUFBRSxHQUFiO0FBQWtCQyxJQUFBQSxPQUFPLEVBQUU7QUFBM0IsR0FMZTtBQU1yQkssRUFBQUEsUUFBUSxFQUFFO0FBQUVOLElBQUFBLFNBQVMsRUFBRSxHQUFiO0FBQWtCQyxJQUFBQSxPQUFPLEVBQUU7QUFBM0I7QUFOVyxDQUFmIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IGFuaW1hdGUgPSAoXG5cdHsgZnJhbWVSYXRlLCB4LCB2LCBkZXN0WCwgaywgYiwgcHJlY2lzaW9uLCBtYXNzLCBrZXksIGVsIH0sXG5cdGZuXG4pID0+IHtcblx0Ly8geCBzdGFydCBwb3NpdGlvblxuXHQvLyB2IHZlbG9jaXR5XG5cdGxldCBuZXdYID0geCxcblx0XHRuZXdWID0gdjtcblxuXHRjb25zdCBhbmltYXRpb25Mb29wID0gKCkgPT4ge1xuXHRcdC8vIFNwcmluZyBzdGlmZm5lc3MsIGluIGtnIC8gc14yXG5cblx0XHQvLyBmb3IgYW5pbWF0aW9ucywgZGVzdFggaXMgcmVhbGx5IHNwcmluZyBsZW5ndGggKHNwcmluZyBhdCByZXN0KS4gaW5pdGlhbFxuXHRcdC8vIHBvc2l0aW9uIGlzIGNvbnNpZGVyZWQgYXMgdGhlIHN0cmV0Y2hlZC9jb21wcmVzc2VkIHBvc2l0aW9uIG9mIGEgc3ByaW5nXG5cdFx0bGV0IEZzcHJpbmcgPSAtayAqIChuZXdYIC0gZGVzdFgpO1xuXG5cdFx0Ly8gRGFtcGluZywgaW4ga2cgLyBzXG5cdFx0bGV0IEZkYW1wZXIgPSAtYiAqIG5ld1Y7XG5cblx0XHQvLyBBY2NlbGFyYXRpb24gKCgtayAqICh4LVgpKSArICgtYiAqIHYpKVxuXHRcdGxldCBhID0gKEZzcHJpbmcgKyBGZGFtcGVyKSAvIG1hc3M7XG5cblx0XHQvLyBmcmFtUmF0ZSBvZiAxMDAwLzYwIHRoYXRzIDYwZnBzXG5cdFx0bmV3ViArPSBhICogKGZyYW1lUmF0ZSAvIDEwMDApO1xuXG5cdFx0bmV3WCArPSBuZXdWICogKGZyYW1lUmF0ZSAvIDEwMDApO1xuXG5cdFx0Ly8gcHJlY2lzaW9uIGlzIHdoZW4gdGhlIGFuaW1hdGlvbiBzaG91bGQgc3RvcCBkZWZhdWx0IGlzIDAuMDEuXG5cdFx0aWYgKE1hdGguYWJzKG5ld1YpIDwgcHJlY2lzaW9uICYmIE1hdGguYWJzKG5ld1ggLSBkZXN0WCkgPCBwcmVjaXNpb24pIHtcblx0XHRcdG5ld1ggPSBkZXN0WDtcblx0XHRcdG5ld1YgPSAwO1xuXHRcdFx0ZWwuc3R5bGVba2V5XSA9IGAke25ld1h9cHhgO1xuXHRcdFx0cmV0dXJuIHR5cGVvZiBmbiA9PT0gJ2Z1bmN0aW9uJyA/IGZuLmNhbGwoKSA6IGZhbHNlO1xuXHRcdH1cblx0XHRpZiAoZWwpIGVsLnN0eWxlW2tleV0gPSBgJHtuZXdYfXB4YDtcblx0XHRyZXF1ZXN0QW5pbWF0aW9uRnJhbWUoYW5pbWF0aW9uTG9vcCk7XG5cdH07XG5cblx0cmVxdWVzdEFuaW1hdGlvbkZyYW1lKGFuaW1hdGlvbkxvb3ApO1xufTtcblxuZXhwb3J0IGNvbnN0IHByZXNldCA9IHtcblx0bm9Xb2JibGU6IHsgc3RpZmZuZXNzOiAxNzAsIGRhbXBpbmc6IDI2IH0sXG5cdGdlbnRsZTogeyBzdGlmZm5lc3M6IDEyMCwgZGFtcGluZzogMTQgfSxcblx0d29iYmx5OiB7IHN0aWZmbmVzczogMTgwLCBkYW1waW5nOiAxMiB9LFxuXHRzdGlmZjogeyBzdGlmZm5lc3M6IDIxMCwgZGFtcGluZzogMjAgfSxcblx0c2xvdzogeyBzdGlmZm5lc3M6IDI4MCwgZGFtcGluZzogNjAgfSxcblx0bW9sYXNzZXM6IHsgc3RpZmZuZXNzOiAyODAsIGRhbXBpbmc6IDEyMCB9XG59O1xuIl19